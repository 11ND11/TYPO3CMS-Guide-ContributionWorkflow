.. include:: ../Includes.txt

.. _commitmessage:

==================
The commit message
==================

Since we strive to automate a lot of things the commit message plays an important role in order to be able to automate.
Here is an example of a commit message:

.. code-block:: none

   [BUGFIX] Save parents localized uid as child reference

   This patch resolves problems with updating translated records which
   have a relation to a parent object. The backend expects the localized
   uid as parent id but extbase currently saves the original uid. This
   leads to wrong relation information within the child record.

   Resolves: #69630
   Releases: master, 6.2
   Change-Id: Ib0af8b5fa13c03e15c4db5cb0ac1a81c8ee568eb

You can see that a commit message consists mainly of five parts, let's go over them step by step:

Summary line
   A summary line starts with a **keyword** and a **brief summary** of what the change does. Make sure to describe how the behavior
   is **now**, not how it used to be - in the end, telling someone what was broken doesn't help anyone, you want to tell
   what is working now :)

   Here is a list of the allowed keywords:

   * [BUGFIX]
   * [FEATURE]
   * [TASK]
   * [DOCS]

   Whenever your change introduces a breaking change, it is **mandatory** to put **!!!** in front of the keyword.

   Optionally you can prefix the keyword with **[WIP]** indicating that the review is in a "Work-In-Progress" state and
   should not be merged.

   So say you want to add a breaking feature which is still work in progress, you would use ``!!![WIP][FEATURE] Transform Lead to Gold``
   as your summary line.

Description
   Here you can go into detail about the how and why of the change. It should be brief, but yet descriptive so people reviewing
   your change get an idea what they need to look out for

Resolves
   You need to reference an issue on Forge_ here simply by adding #[ISSUE_NUMBER]. If your issue resolves `multiple` issues
   at once (yay!), make sure to add more lines, do not separate them by comma or alike.

Releases
   This is a comma separated list of the target versions you intend to apply this fix on. In general, we **always** fix
   things on **master** first and then backport a change if it goes along with our support rules for older versions.

   Always make sure the target version does indeed exist, when in doubt, as in the coredev channel on Slack_.

Change-Id
   This is a unique value used by Gerrit_ to identify a change. This is being generated by :ref:`our pre-commit hook<git-setup-precommithook>`.



